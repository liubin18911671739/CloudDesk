resolvers mydns
    nameserver dns1 127.0.0.11:53
    
global
    daemon
    tune.ssl.default-dh-param 2048
    ## This will activate logs on docker logs (don't activate in production!)
    log stdout format raw local0

  defaults
    mode http
    ## This will activate logs (don't activate in production!)
    # log             global
    # option          httplog
    
    timeout         connect 25s
    timeout         client 25s
    timeout         client-fin 25s
    timeout         server 25s
    timeout         tunnel 7200s
    option          http-server-close
    option          httpclose
    maxconn         2000
    option          tcpka
    option forwardfor
  
  frontend  fe_proxy_squid
    bind            0.0.0.0:80
    mode  tcp
    option tcplog
    tcp-request inspect-delay 10s
    tcp-request content accept if { ssl_fc }
    tcp-request content accept if !HTTP
    use_backend redirecthttps-backend if !{ method CONNECT }
    default_backend be_isard-squid

  backend redirecthttps-backend
    mode http
    http-request redirect scheme https if !{ ssl_fc }
    server localhost:8443 127.0.0.1:8443 check

  frontend SSL_PassThrough
    mode tcp
    bind *:443
    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }

    acl is_upgrade hdr(Connection) -i upgrade
    acl is_websocket hdr(Upgrade) -i websocket
  
    acl is_rdpgw  path_beg /remoteDesktopGateway
    acl is_rdpgw_http path_beg /rdpgw
  
    # # RDPGW ENDPOINTS
    # use_backend be_isard-rdpgw if is_websocket is_rdpgw
    # use_backend be_isard-rdpgw if is_rdpgw or is_rdpgw_http

    use_backend be_isard-guacamole if is_websocket { path_beg /websocket-tunnel }
    use_backend be_isard-apiv3 if is_websocket { path_beg /api/v3/socket.io }
    ### use_backend be_isard-websockify if is_websocket !{ path_beg /sockjs-node/ }
    use_backend be_isard-rdpgw if is_websocket 
    # tcp-request content accept if !HTTP
    #use_backend be_isard-rdpgw if { method CONNECT }
    use_backend be_isard-rdpgw if { path_beg /remoteDesktopGateway } or { path_beg /rdpgw }
    #default_backend be_isard-rdpgw
    default_backend bk_tcp_to_https

  backend bk_tcp_to_https
    mode tcp
    server haproxy-https 127.0.0.1:8443 check

  frontend  fe_secured
    bind            0.0.0.0:8443 ssl crt /certs/chain.pem
    mode            http
    timeout         client   3600s
    maxconn         50000
    option          httpclose
    option          tcpka

    ## Log data (don't activate in production!)
    option httplog
    log global
    # Don't log normal access. Disable to get all requests in log.
    # option dontlog-normal
    option log-separate-errors
    # custom log format
    # https://www.haproxy.com/blog/haproxy-log-customization/
    log-format "%ci [%t] %ST %[capture.req.hdr(0)] %[var(req.block)] %hs %{+Q}r"
    # log-format "%ci:%cp [%t] %[capture.req.hdr(0)] %hs %{+Q}r"
    # log-format "%ci:%cp [%t] %ft %b/%s %Tw/%Tc/%Tt %B %ts %ac/%fc/%bc/%sc/%rc %sq/%bq"



    acl is_upgrade hdr(Connection) -i upgrade
    acl is_websocket hdr(Upgrade) -i websocket

    acl is_guacamole_ws path_beg /websocket-tunnel
    acl is_guacamole_http path_beg /tunnel
    acl is_api path_beg /api

    #http-request return status 503 if is_api !{ srv_is_up(be_isard-engine/engine) }

    use_backend be_isard-rdpgw-http if { path_beg /remoteDesktopGateway } or { path_beg /rdpgw }

    # GUACAMOLE ENDPOINTS
    use_backend be_isard-guacamole if is_websocket is_guacamole_ws
    use_backend be_isard-guacamole if is_guacamole_http

    # AUTHENTICATION ENDPOINTS
    use_backend be_isard-authentication if { path_beg /authentication }

    # API ENDPOINTS
    use_backend be_isard-apiv3 if { path_beg /api/v3 }
    use_backend be_isard-apiv3 if is_websocket { path_beg /api/v3/socket.io }

    # WEBAPP ENDPOINTS
    use_backend be_isard-webapp if { path_beg /socket.io }
    use_backend be_isard-webapp if { path_beg /isard-admin } or { path_beg /isard-admin/ }

    # SCHEDULER ENDPOINTS
    use_backend be_isard-scheduler if { path_beg /scheduler }

    # DEFAULT WEBSOCKETS: HTML5 ENDPOINT
    use_backend be_isard-websockify if is_websocket !{ path_beg /sockjs-node/ }

    # debug backends
    use_backend be_isard-db if { path_beg /debug/db } 
    # use_backend be_isard-video if { path_beg /debug/video }

    # letsencrypt
    use_backend letsencrypt-backend if { path_beg /.well-known/acme-challenge/ }

    # graph backends
    use_backend be_isard-grafana if { path_beg /monitor } or { path_beg /monitor/ }

    # filebrowser
    use_backend be_isard-filebrowser if { path_beg /storage }

    # develop backends
    # This must be the last use_backend directive
    use_backend be_isard-static if { env(DEVELOPMENT) -m str true } { path_beg /assets/ }
    use_backend be_isard-frontend-dev if { env(DEVELOPMENT) -m str true } !{ path_beg /viewer/ } !{ path_beg /custom/ }

    default_backend         be_isard-static

  backend be_isard-engine
    server engine isard-engine:5555 check port 5555 inter 5s rise 2 fall 3 resolvers mydns init-addr none

  backend be_isard-guacamole
    server guacamole isard-guac:4567 check port 4567 inter 5s rise 2 fall 3 resolvers mydns init-addr none

  backend be_isard-websockify
    server websockify isard-websockify:8080 check port 8080 inter 5s rise 2 fall 3 resolvers mydns init-addr none

  backend be_isard-squid
    mode tcp
    #option http-keep-alive
    option redispatch
    option abortonclose
    server squid isard-squid:8080 check port 8080 inter 5s rise 2 fall 3 resolvers mydns init-addr none

  backend be_isard-rdpgw
    mode tcp
    http-request replace-path /rdpgw/(.*) /\1
    # timeout connect 4s
    # timeout http-keep-alive 10s
    # timeout server 300s
    server vpn isard-vpn:1313 maxconn 1000 check port 1313 inter 5s rise 2 fall 3 resolvers mydns init-addr none
    # server rdpgw isard-rdpgw:1313 maxconn 1000 check port 1313 inter 5s rise 2 fall 3 resolvers mydns init-addr none

  backend be_isard-rdpgw-http
    mode http
    http-request replace-path /rdpgw/(.*) /\1
    # timeout connect 4s
    # timeout http-keep-alive 10s
    # timeout server 300s
    server vpn isard-vpn:1313 maxconn 1000 check port 1313 inter 5s rise 2 fall 3 resolvers mydns init-addr none
    # server rdpgw isard-rdpgw:1313 maxconn 1000 check port 1313 inter 5s rise 2 fall 3 resolvers mydns init-addr none

  backend be_isard-authentication
    http-request replace-path /authentication/(.*) /\1
    server authentication isard-authentication:1313 maxconn 1000 check port 1313 inter 5s rise 2 fall 3 resolvers mydns init-addr none

  backend be_isard-static
    server static isard-static:80 maxconn 1000 check port 80 inter 5s rise 2 fall 3 resolvers mydns init-addr none

  backend be_isard-frontend-dev
    server frontend-dev isard-frontend-dev:8080 maxconn 1000 check port 8080 inter 5s rise 2 fall 3 resolvers mydns init-addr none

  backend be_isard-db
   acl authorized http_auth(AuthUsers)
   http-request auth realm AuthUsers unless authorized
   http-request redirect scheme http drop-query append-slash if { path -m str /debug/db }
   http-request replace-path /debug/db/(.*) /\1 
   http-request del-header Authorization 
   server metrics-db "${RETHINKDB_HOST}":8080 maxconn 10 check port 8080 inter 5s rise 2 fall 3  resolvers mydns init-addr none
   server isard-static isard-static backup

  backend be_isard-filebrowser
    server filebrowser isard-storage:8080 check port 8080 inter 5s rise 2 fall 3 resolvers mydns init-addr none


  # backend be_isard-video
  #  acl authorized http_auth(AuthUsers)
  #  http-request auth realm AuthUsers unless authorized

  #  http-request replace-path /debug/video/(.*) /haproxy/\1    
  #  http-request del-header Authorization 
  #  server isard-video "${VIDEO_HAPROXY_HOST}":8888 maxconn 10 check port 8888 inter 5s rise 2 fall 3  resolvers mydns init-addr none
  #  server isard-static isard-static backup

  backend be_isard-grafana
   http-request set-path %[path,regsub(^/monitor/?,/)]
   server isard-grafana "${GRAFANA_HOST}":3000 maxconn 10 check port 3000 inter 5s rise 2 fall 3  resolvers mydns init-addr none
   server isard-static isard-static:81 backup

  backend be_isard-webapp
    timeout queue 600s
    timeout server 600s
    timeout connect 600s
    server static "${WEBAPP_HOST}":5000 maxconn 100 check port 5000 inter 5s rise 2 fall 3  resolvers mydns init-addr none
    server isard-static isard-static backup

  backend be_isard-apiv3
    option forwardfor
    timeout queue 600s
    timeout server 600s
    timeout connect 600s
    http-response set-header Access-Control-Allow-Origin "*"
    server isard-api isard-api:5000 maxconn 1000 check port 5000 inter 5s rise 2 fall 3  resolvers mydns init-addr none

  backend be_isard-scheduler
    option forwardfor
    timeout queue 5s
    timeout server 10s
    timeout connect 5s
    http-response set-header Access-Control-Allow-Origin "*"
    server isard-scheduler isard-scheduler:5000 maxconn 1000 check port 5000 inter 5s rise 2 fall 3  resolvers mydns init-addr none


  backend letsencrypt-backend
   server letsencrypt 127.0.0.1:8080

  # listen stats 
  #       bind                0.0.0.0:8888
  #       mode                http
  #       stats               enable
  #       option              httplog
  #       stats               show-legends
  #       stats               uri /haproxy
  #       stats               realm Haproxy\ Statistics
  #       stats               refresh 5s
  #       #stats               auth staging:Password
  #       #acl authorized http_auth(AuthUsers)
  #       #stats          http-request auth unless authorized
  #       timeout             connect 5000ms
  #       timeout             client 50000ms
  #       timeout             server 50000ms

userlist AuthUsers
    user admin password $6$fBN2a.eJs8tVVVum$kKub56o9y0IBgXpE8isywqO7Ud2SJlTEpZhJiBJQTweSTXspYyfZm2cCxx8ALE5vZaPBCDhPr/JYWNBIoRPZb1
